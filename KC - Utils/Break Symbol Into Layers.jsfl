//Break Symbol Into Layers//Justin Putney//http://ajarproductions.com//version 0.7.0var deleteOriginal = true;var repositionToRegistration = true;var dom = fl.getDocumentDOM(); var tl = dom.getTimeline(); var lib = dom.library; var sel= dom.selection;var symbolsConverted = 0;run();function run() {	if(sel.length == 0){		alert('You must select a symbol first.');		return;	}	for (var i=0; i < sel.length; i++){		if(sel[i].elementType == "instance") {			breakSymbol(sel[i]);			symbolsConverted++;		}	}		if(symbolsConverted == 0) {		alert('No symbols were found in your selection.');	}}function breakSymbol(symbol){	var symbolTL = symbol.libraryItem.timeline;	var layerName = 'from symbol: ' + symbol.libraryItem.name.split('/').pop();	lib.editItem(symbol.libraryItem.name);	symbolTL.selectAllFrames();	symbolTL.copyFrames();	dom.exitEditMode();	var pasteIntoLayerNum = tl.addNewLayer();	var folderLayerNum = tl.addNewLayer(layerName, "folder");	pasteIntoLayerNum = folderLayerNum + 1;	tl.layers[pasteIntoLayerNum].parentLayer = tl.layers[folderLayerNum];	tl.setSelectedFrames([pasteIntoLayerNum, 0, tl.layers[pasteIntoLayerNum].frameCount]);		tl.pasteFrames();	var nOffset = pasteIntoLayerNum;	var xOffset = symbol.x;	var yOffset = symbol.y;		//scew and transform, etc, would have to be applied to everything selected together -- difficult/impossible with mult. frames	for(var n=0; n < symbolTL.layers.length; n++) {		var srcLayer = symbolTL.layers[n];		var targLayerNum = n + nOffset;		var targLayer = tl.layers[targLayerNum];					if(repositionToRegistration) {			repositionAllFrames(tl, targLayerNum, xOffset, yOffset);		}		targLayer.locked = srcLayer.locked;		targLayer.outline = srcLayer.outline;		targLayer.visible = srcLayer.visible;		targLayer.height = srcLayer.height;		targLayer.color = srcLayer.color;	}		if(deleteOriginal) {		if(symbol.layer.frames[0].elements.length <= 1) {			tl.deleteLayer(nOffset + symbolTL.layers.length);		}		else {			dom.selectNone();			dom.selection = [symbol];			dom.deleteSelection();		}	}	tl.setSelectedLayers(folderLayerNum, true);	}function repositionAllFrames(timeL, tLayerNum, offX, offY){	var tLayer = timeL.layers[tLayerNum];	for(var j=0; j < tLayer.frameCount; j++){			var tFrame = tLayer.frames[j];			if(tFrame == undefined) {				break;			}			if(tFrame.startFrame == j) { //only run on keyframes							if(tFrame.elements.length > 0) {					for(var e=0; e < tFrame.elements.length; e++) {						var elem = tFrame.elements[e];						elem.x = elem.x - dom.width/2 + offX;						elem.y = elem.y - dom.height/2 + offY;					}					break;				}			} else { //skip to next keyframe				j = tFrame.startFrame + tFrame.duration - 1;				continue;			}		}}