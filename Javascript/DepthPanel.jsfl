fl.runScript(fl.configURI+"Javascript/TimelineUtil.jsfl");var eventId;function init(){	if(eventId){		fl.removeEventListener("frameChanged",eventId)	}	eventId = fl.addEventListener("frameChanged",frameChagneHandler)	if(fl.getDocumentDOM()){		sendSelectionXML();	}}function frameChagneHandler(){	sendSelectionXML();}function getPanel(name){	var panels = fl.swfPanels;	for each(var _panel in panels){		if(_panel.name == name){			break;		}else{			_panel = null;		}	}	return _panel}function sendSelectionXML(){	getPanel("depthPanel").call("setSelectionXML",getSelectionXML())}function swapIndex(fromIndex,toIndex){	var doc = fl.getDocumentDOM();	var elements = getElements();	if(!elements)return;	for each(var element in elements){		element.selected = (element.depth == fromIndex)	}	element = fl.getDocumentDOM().selection[0];	fl.trace(element.depth+","+toIndex+",a")	doc.arrange("front");//深度は0に	var step = Number(toIndex);	//指定の深度になるまで反復	while(step){		doc.arrange("backward");		step--;	}	//XMLの深度情報が更新されているので再取得させる	sendSelectionXML()}function getSelectionXML(){		var elements = getElements();	if(!elements)return "";	var xml = <elements />	for each(var element in elements){		var type = element.instanceType || element.elementType;				//正規表現でtypeを振り分け		type = RegExp(/symbol|compiled clip/).test(type) ? "movieclip":			   RegExp(/video/).test(type) ? "video":			   RegExp(/text/i).test(type) ? "text":type;						//nameはelementに依存		var name = (element.name || ((element.libraryItem && element.libraryItem.name) || type))		var node = <element name={name} type={type} index={element.depth} />		xml.appendChild(node);	}	return escape(xml.toXMLString());}function getElements(){	var frames = TimelineUtil.getSelectedFrames();	//何も選択されていない	if(!frames)return null;	var frame =  frames[0];	//逆順にする	return frame.elements.concat().reverse();}