TimelineUtil = function(){}/*** 選択されているレイヤーをLayerオブジェクト配列で参照する**/TimelineUtil.getSelectedLayers = function(timeline){	timeline = timeline || fl.getDocumentDOM().getTimeline();	var arr = timeline.getSelectedLayers()	if(!arr || !arr.length)return null;	var layers = [];	for each(var index in arr){		var layer = timeline.layers[index];		layers.push(layer);	}	return layers;}/***選択されているフレームをFrameオブジェクト配列で参照する。*isStartFrameをtrueにすると先頭のフレームのみが返される。*isEndFrameをtrueにすると最後尾のフレームのみが返される。**/TimelineUtil.getSelectedFrames = function(timeline,isStarframe,isEndframe){	timeline = timeline || fl.getDocumentDOM().getTimeline();	var arr = timeline.getSelectedFrames();	if(!arr || !arr.length)return null;	var layers = timeline.layers;	var frames = [];	for(var i=0;i<arr.length;i+=3){		var layer = layers[arr[i]];//レイヤー		var f = arr[i+1];//選択範囲先頭のフレームindex		var l = arr[i+2];//選択範囲最後尾のフレームindex				for(f;f<l;f++){//選択範囲の中でループ処理						var frame = layer.frames[f];			if(!frame)continue;			if((!isStarframe && !isEndframe) || 			   (isStarframe && frame.startFrame == f) || 			   (isEndframe && layer.frameCount-1 == f)){				frames.push(frame);			}		}	}	return frames}/***現在のタイムラインの全てのエレメントを配列で返す**/TimelineUtil.getElements = function(timeline){	timeline = timeline || fl.getDocumentDOM().getTimeline();	var layers = timeline.layers;	var arr = [];	layers.forEach(function(layer){		var frames = layer.frames;		frames.forEach(function(frame,index){			if(frame.startFrame == index){				arr = arr.concat(frame.elements);			}		})	});	return arr.length ? arr : null;}/**	現在のタイムラインにあるエレメンツの全てのライブラリアイテムを返す*/TimelineUtil.getItems = function (timeline){	var elements = TimelineUtil.getElements(timeline);	var arr = [];	elements.forEach(function(element){		var item = element.libraryItem;		if(item){			arr.push(item);		}	});	return arr.length ? arr : null;}/***エレメントのレイヤーのインデックスを返す**/TimelineUtil.getLayerIndex = function (arg,layer){	var timeline = (arg instanceof Timeline) ?  arg : fl.getDocumentDOM().getTimeline();	layer = (arg instanceof Layer) ? arg : layer;	return timeline.layers.indexOf(layer)}/***タイムラインに配置されているエレメントを子要素まで再帰的に返す。*/TimelineUtil.eachElements = function(timeline,callBack){	var elements = TimelineUtil.getElements(timeline);	if(!elements)return;	elements.forEach(function(element,index,arr){		var item = element.libraryItem;		callBack(element,index,arr,item);		if(item && item instanceof SymbolItem){			TimelineUtil.eachElements(item.timeline,callBack)		}	});}/***選択されているエレメントをフレームに配分*/TimelineUtil.distributeToFrames = function (){	var doc = fl.getDocumentDOM();	var timeline = doc.getTimeline();	var selection = doc.selection.concat();	doc.selectNone();		if(!selection.length)return;//選択していなければ処理を続行しない		var layerIndex = timeline.addNewLayer();	var layer = timeline.layers[layerIndex];	var frames = layer.frames;	timeline.removeFrames(0,frames.length);//レイヤーに生成されたフレームの削除	timeline.setSelectedFrames(0,0)	//選択されているフレームをリセット	selection.forEach(function(element,i,arr){		element.selected = true;		doc.clipCut();		timeline.currentLayer = layerIndex;		timeline.currentFrame = i		timeline.convertToBlankKeyframes();		doc.clipPaste(true);		doc.selectNone();	})}