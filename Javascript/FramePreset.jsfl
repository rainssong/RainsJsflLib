fl.outputPanel.clear();var XML_DEC = '<?xml version="1.0" ?>\n'var PRESET_URI = fl.configURI+"WindowSWF/FramePreset/preset.xml"function init(){	FLfile.write(PRESET_URI,XML_DEC+'<presets>\n</presets>');}/**プリセットを読み込む**/function readPreset(){	//preset_xmlがなければ初期化	if(!FLfile.exists(PRESET_URI)){		init();		return readPreset();	}	//読み込んだ文字列に対し、XML宣言をはがす	var xml = XML(FLfile.read(PRESET_URI).replace(/^\<\?xml.*\?\>/,""));	//XML宣言だけでなにも書かれていない場合	if(!xml.toXMLString()){		init();		return readPreset();	}else{		return xml;	}}/**プリセットファイルを上書き**/function writePreset(presets){	FLfile.write(PRESET_URI,XML_DEC+presets.toXMLString());	return presets}/**プリセットを登録**/function addPreset(){	var presets = readPreset();	var preset = getSelectedFrameXML(null,true);	//プリセット名の入力を要求	do{		var presetName = prompt(!duplicate ? "プリセット名を入力" : "プリセット名が重複しています","");		if(!presetName){//キャンセルされたか、プリセット名が空の場合			if(presetName == "")alert("プリセット名が入力されていません");			break;		}		var duplicate = Boolean(presets.preset.(@name == presetName).toXMLString());	}while(duplicate)//重複していれば反復	if(presetName){		preset.@name = presetName;		presets.appendChild(preset)		return writePreset(presets);	}else{		return presets	}}/** プリセットを削除**/function removePreset(presetName){	var presets = readPreset();	if(confirm(presetName+"を削除しますか？")){		//delete演算子で対象のノードを削除		delete presets.preset.(@name == presetName)[0];	}	return writePreset(presets);}/**プリセットを適用**/function applyPreset(presetName){	var presets = readPreset();	applyXML(fl.getDocumentDOM().getTimeline(),presets.preset.(@name == presetName)[0])}/**XMLをもとにタイムラインにフレームを生成**/function applyXML(timeline,xml){	//フレーム生成の基準点を設定	var layerOrigin = timeline.getSelectedFrames()[0] || 0;	var frameOrigin = timeline.getSelectedFrames()[1] || 0;	//プリセット生成時のフレーム基準点	var presetLayerOrigin = Number(xml.timeline.@selectedLayerOrigin)	var presetFrameOrigin = Number(xml.timeline.@selectedFrameOrigin)	for each(var layerNode in xml.*.layer){		//シングルレイヤーなら基準点のみを利用し、そうでなければXMLに基づいた厳密な生成を行う		var layerIndex = Number(layerNode.@index)-presetLayerOrigin+layerOrigin;		var layer = timeline.layers[layerIndex];		if(!layer){			timeline.addNewLayer(layerNode.@name,"normal",false)			layer = timeline.layers[layerIndex];		}		timeline.setSelectedLayers(layerIndex);		for each(var frameNode in layerNode.frame){			var frameIndex = Number(frameNode.@index)-presetFrameOrigin+frameOrigin;			var frame = layer.frames[frameIndex];			if(!frame || frame.startFrame != frameIndex){				//convertToKeyframesはfram配列とマッチしていない				timeline.convertToKeyframes(frameIndex);				frame = layer.frames[frameIndex];			}			frame.name = frameNode.@name;			frame.actionScript = frameNode.actionScript.text();		}	}	timeline.setSelectedLayers(layerOrigin);}/**Frameの情報を管理するオブジェクト**/FrameInfo = function(timeline,layerIndex,frameIndex){	this.timeline = timeline;	this.layerIndex = layerIndex;	this.frameIndex = frameIndex;}FrameInfo.prototype = {	getTimeline:function(){		return this.timeline	},	getLayer:function(){		return this.timeline.layers[this.layerIndex]	},	getFrame:function(){		return this.getLayer().frames[this.frameIndex]	},	convertXML:function(){		return <timeline>			<layer index={this.layerIndex} name={this.getLayer().name}>				<frame index={this.frameIndex} name={this.getFrame().name}>					<actionScript>{this.getFrame().actionScript}</actionScript>				</frame>			</layer>		</timeline>	}}/**選択されているフレームの情報を内包するXMLを返す**/function getSelectedFrameXML(timeline,isStarframe,isEndframe){	timeline = timeline || fl.getDocumentDOM().getTimeline();	var arr = timeline.getSelectedFrames();	if(!arr || !arr.length)return null;	var layers = timeline.layers;	var frames = [];	for(var i=0;i<arr.length;i+=3){		var k = arr[i]//レイヤーindex		var f = arr[i+1];//選択範囲先頭のフレームindex		var l = arr[i+2];//選択範囲最後尾のフレームindex				for(f;f<l;f++){//選択範囲の中でループ処理			var fi = new FrameInfo(timeline,k,f);			var layer = fi.getLayer();//レイヤー			var frame = fi.getFrame();			if(!frame)continue;			if((!isStarframe && !isEndframe) || 			   (isStarframe && frame.startFrame == f) || 			   (isEndframe && layer.frameCount-1 == f)){				frames.push(fi);			}		}	}	return convertMergeXML(frames,arr[0],arr[1]);}//FrameInfo配列からマージしたXMLを得るfunction convertMergeXML(frameInfos,selectedLayerOrigin,selectedFrameOrigin){	var xml = <preset><timeline selectedLayerOrigin={selectedLayerOrigin} selectedFrameOrigin={selectedFrameOrigin}></timeline></preset>	var timeline = xml.timeline	for each(var info in frameInfos){		var data = info.convertXML();		var layer = timeline.layer.(@index == data.layer.@index)[0]||					timeline.appendChild(<layer index={data.layer.@index} name={data.layer.@name} />).layer.(@index == data.layer.@index)[0];		layer.appendChild(data.layer.frame)	}	return xml}